-- Explore the tables you are going to be working with 
SELECT *
FROM BIT_DB.customers 
LIMIT 100;

SELECT * 
FROM BIT_DB.JanSales
LIMIT 100;

SELECT * 
FROM BIT_DB.customers
WHERE order_id IS NOT NULL
    and order_Id <> '';

SELECT * 
FROM BIT_DB.customers
WHERE length(order_id) = 6
AND order_id <> 'Order ID';

-- Create your own SQL queries to answer the following questions:
-- How many orders were placed in January? Remember to filter out the blank and incorrect order IDs.
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

-- How many of those orders were for an iPhone?
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product like '%iphone%'
    AND length(orderid) = 6
    AND orderid <> 'Order ID';


-- Select the customer account numbers for all the orders that were placed in February. 
-- Have your results reflect the customer account number, order date and product purchased.
SELECT 
    acctnum, 
    orderdate, 
    product
FROM BIT_DB.customers c
    JOIN BIT_DB.FebSales f
    on c.order_id = f.orderid
WHERE length(orderid) = 6
    AND orderid <> 'Order ID';
    
-- Which product was the cheapest one sold in January, and what was the price?
SELECT 
    MIN(price) AS price,
    product AS lowest_priced_product
FROM BIT_DB.JanSales;

-- What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).
SELECT 
    SUM(quantity) * price AS total_revenue,
    product
FROM BIT_DB.JanSales
GROUP BY product;

-- Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT
sum(quantity), 
product, 
sum(quantity)*price as revenue,
location
FROM BIT_DB.FebSales 
WHERE location like '548 Lincoln St%'
GROUP BY product;

-- How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT
    COUNT(DISTINCT cus.acctnum), 
    AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cus
ON Feb.orderid = cus.order_id
WHERE Feb.quantity > 2
    AND length(orderid) = 6 
    AND orderid <> 'Order ID';

-- Using dates, 'like' and '%' to query data
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' and '02/18/19 00:00';

SELECT location
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 1:35';

SELECT sum(quantity)
FROM BIT_DB.FebSales
WHERE orderdate LIKE '02/18/19%';

-- List all the products sold in Los Angeles in February, and include product name, location and how many of each were sold.
SELECT Product,
    Location,
    SUM(quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP by Product;

-- Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT DISTINCT(location),
    COUNT(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND LENGTH(orderid) = 6
AND orderid<> 'Order ID'
GROUP BY location
HAVING COUNT(orderid) > 2;

-- How many of each type of headphone were sold in February?
SELECT SUM(quantity) AS Quantity,
    Product
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
GROUP BY Product;

-- What was the average amount spent per account in February? We want the average amount spent / number of accounts, not the amount spent by each account.
SELECT SUM(quantity*price)/COUNT(cus.acctnum) AS avg_spent
FROM BIT_DB.FebSales feb
    LEFT JOIN BIT_DB.customers cus
        ON FEB.orderid = Cus.order_id
WHERE LENGTH(orderid) = 6
AND orderid <> 'Order ID';

-- What was the average quantity of products purchased per account in February?  We want the overall average, not the average for each account individually.
SELECT SUM(quantity)/COUNT(cus.acctnum) AS avg_quantity_peracct
FROM BIT_DB.FebSales feb
    LEFT JOIN BIT_DB.customers cus
        ON feb.orderid = cus.order_id
WHERE LENGTH(orderid) = 6
AND orderid <> 'Order ID';

-- Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT Product,
    SUM(quantity*price) AS Jan_revenue
FROM BIT_DB.JanSales
GROUP BY Product
ORDER BY SUM(quantity*price) DESC
LIMIT 1;

